// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: place.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace BotTrade {
  public static partial class PlaceService
  {
    static readonly string __ServiceName = "place.PlaceService";


    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::BotTrade.PlaceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PlaceService</summary>
    [grpc::BindServiceMethod(typeof(PlaceService), "BindService")]
    public abstract partial class PlaceServiceBase
    {
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(PlaceServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder().Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PlaceServiceBase serviceImpl)
    {
    }

  }
}
#endregion
