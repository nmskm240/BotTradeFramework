@startuml
class "RingQueue`1"<T> {
    + Count : int <<get>>
    + Capacity : int <<get>>
    + RingQueue(capacity:int)
    + Enqueue(item:T) : void
    + Dequeue() : T
    + Peek() : T
    + GetEnumerator() : IEnumerator<T>
}
class "IEnumerable`1"<T> {
}
"IEnumerable`1" "<T>" <|-- "RingQueue`1"
class AnalysisData <<record>> {
    + AnalysisData(date:DateTime, values:Dictionary<string, decimal>)
}
class "Dictionary`2"<T1,T2> {
}
AnalysisData --> "Values<string,decimal>" "Dictionary`2"
AnalysisData --> "Date" DateTime
class Bot {
    + Lot : float <<get>> <<init>>
    + IsStarted : bool <<get>> = false
    + Bot(setting:BotSetting, exchange:IExchange, strategies:IEnumerable<Strategy>, logger:ILogger<Bot>)
    + Start() : void
    + <<async>> Stop() : Task
    + Dispose() : void
}
IDisposable <|-- Bot
Bot --> "Report" StrategyReport
class Candle {
    + Open : decimal <<get>> <<init>>
    + High : decimal <<get>> <<init>>
    + Low : decimal <<get>> <<init>>
    + Close : decimal <<get>> <<init>>
    + Volume : decimal <<get>> <<init>>
    + Candle(symbol:Symbol, date:DateTime, open:decimal, high:decimal, low:decimal, close:decimal, volume:decimal, timeframe:Timeframe)
    + {static} Aggregate(candles:IEnumerable<Candle>, timeframe:Timeframe) : Candle
}
IQuote <|-- Candle
Candle --> "Symbol" Symbol
Candle --> "Date" DateTime
Candle --> "Timeframe" Timeframe
enum ExchangePlace {
    Bybit,
    BybitTestnet,
    Binance,
    BinanceTestnet,
}
interface ICandleRepository {
}
interface IUpdatableCandleRepository {
}
ICandleRepository <|-- IUpdatableCandleRepository
interface IExchange {
    + Buy(quantity:float) : Task<Position>
    + Sell(quantity:float) : Task<Position>
    + {abstract} ClosePosition(position:Position) : Task<decimal>
    + {abstract} ClosePositionAll() : Task<decimal>
}
class "List`1"<T> {
}
class "IConnectableObservable`1"<T> {
}
IExchange --> "Place" ExchangePlace
IExchange --> "Positions<Position>" "List`1"
IExchange --> "OnPulled<Candle>" "IConnectableObservable`1"
IExchange --> "Symbol" Symbol
enum PositionStatus {
    Open,
    Close,
}
enum PositionType {
    Long,
    Short,
}
class Position {
    + Id : string <<get>> <<init>>
    + Quantity : float <<get>> <<init>>
    + Entry : decimal <<get>> <<init>>
    + Exit : decimal <<get>>
    +  <<event>> OnClosed : Action<Position>? 
    + PnL : decimal <<get>>
    + IsWin : bool <<get>>
    + Position(symbol:Symbol, type:PositionType, quantity:float, entry:decimal, entryAt:DateTime, id:string?, exit:decimal?, exitAt:DateTime?)
    + Close(exitPrice:decimal, exitDate:DateTime) : void
}
Position --> "Symbol" Symbol
Position --> "Type" PositionType
Position --> "EntryAt" DateTime
Position --> "ExitAt" DateTime
Position --> "Status" PositionStatus
class Setting <<record>> {
}
class "IEnumerable`1"<T> {
}
Setting --> "Api<ApiSetting>" "IEnumerable`1"
Setting --> "Bots<BotSetting>" "IEnumerable`1"
abstract class Strategy {
    + Strategy(candleStream:IObservable<Candle>, setting:StrategySetting)
    + {abstract} OnNextAction(datas:IEnumerable<AnalysisData>) : StrategyActionType
    + {static} FromSetting(setting:StrategySetting, stream:IObservable<Candle>) : Strategy
    + <<override>> ToString() : string
    + Dispose() : void
}
class "IEnumerable`1"<T> {
}
class "IObservable`1"<T> {
}
IDisposable <|-- Strategy
Strategy --> "KInd" StrategyKind
Strategy --> "Timeframe" Timeframe
Strategy --> "Parameters<int>" "IEnumerable`1"
Strategy --> "OnAnalysised<AnalysisData>" "IObservable`1"
Strategy --> "OnComfirmedNextAction<StrategyActionType>" "IObservable`1"
enum StrategyActionType {
    Buy,
    Sell,
    Neutral,
}
enum StrategyKind {
    MACross,
}
class StrategyReport {
    + PnL : decimal <<get>>
    + ProfitAverage : decimal <<get>>
    + LossAverage : decimal <<get>>
    + MaxWinStreak : int <<get>>
    + MaxLossStreak : int <<get>>
    + WinRate : float <<get>>
    + MaxDrawdown : decimal <<get>>
    + RiskReward : decimal <<get>>
    + StrategyReport(trades:IEnumerable<Position>?)
    + Log(position:Position) : void
}
class "IEnumerable`1"<T> {
}
StrategyReport --> "Trades<Position>" "IEnumerable`1"
enum Symbol {
    Future_BTCUSDT,
    Future_ETHUSDT,
    Spot_BTCUSDT,
    Spot_ETHUSDT,
    Spot_ETHBTC,
}
enum Timeframe {
    OneMinute= 1,
    FiveMinute= 5,
    FifteenMinute= 15,
    OneHour= 60,
    FourHour= 240,
    OneDay= 1440,
}
class TimeframeExtensions <<static>> <<partial>> {
    + {static} ToTimeSpan(timeframe:Timeframe) : TimeSpan
}
class BotFactory {
    + IsBacktest : bool <<get>> = false
    + BotFactory(settings:IEnumerable<ApiSetting>)
    + BotFactory()
    + Create(setting:BotSetting) : Bot
}
class StrategyReporter <<static>> {
    + {static} <<async>> Export(directoryName:string, report:StrategyReport, shouldExportTradesToDB:bool, cancellation:CancellationToken) : Task<Plot>
}
class CnadleRepositoryTest {
    + <<async>> FetchHistoricalData(symbol:Symbol, place:ExchangePlace) : Task
}
class EnumStringAttribute {
    + StringValue : string <<get>> <<protected set>>
    + EnumStringAttribute(value:string)
}
class EnumString <<static>> {
    + {static} GetStringValue(value:Enum) : string
}
Attribute <|-- EnumStringAttribute
class ReflectableEnumAttribute <<sealed>> {
    + ReflectableEnumAttribute(reflectableType:Type, argTypes:Type[]?)
    + ReflectableEnumAttribute(typeName:string, argTypes:Type[]?)
    + ReflectableEnumAttribute(assemblyName:string, typeName:string, argTypes:Type[]?)
}
class ReflectableEnum <<static>> {
    + {static} Reflection(value:Enum, args:object?[]) : T?
}
class "IEnumerable`1"<T> {
}
Attribute <|-- ReflectableEnumAttribute
ReflectableEnumAttribute --> "ReflectableType" Type
ReflectableEnumAttribute --> "ArgTypes<Type>" "IEnumerable`1"
class IEnumerableExtentsion <<static>> {
    + {static} Combination(source:IEnumerable<Source>, args:IEnumerable<Arg>, converter:Func<Source, Arg, Result>) : IEnumerable<Result>
    + {static} Combination(source:IEnumerable<Source>, args1:IEnumerable<Arg1>, args2:IEnumerable<Arg2>, converter:Func<Source, Arg1, Arg2, Result>) : IEnumerable<Result>
    + {static} Combination(source:IEnumerable<Source>, args1:IEnumerable<Arg1>, args2:IEnumerable<Arg2>, args3:IEnumerable<Arg3>, converter:Func<Source, Arg1, Arg2, Arg3, Result>) : IEnumerable<Result>
    + {static} Combination(source:IEnumerable<Source>, args1:IEnumerable<Arg1>, args2:IEnumerable<Arg2>, args3:IEnumerable<Arg3>, args4:IEnumerable<Arg4>, converter:Func<Source, Arg1, Arg2, Arg3, Arg4, Result>) : IEnumerable<Result>
    + {static} Combination(source:IEnumerable<Source>, args1:IEnumerable<Arg1>, args2:IEnumerable<Arg2>, args3:IEnumerable<Arg3>, args4:IEnumerable<Arg4>, args5:IEnumerable<Arg5>, converter:Func<Source, Arg1, Arg2, Arg3, Arg4, Arg5, Result>) : IEnumerable<Result>
}
class ApiSetting <<record>> {
    + IsTestnet : bool <<get>>
    + <<required>> Key : string <<get>> <<set>>
    + <<required>> Secret : string <<get>> <<set>>
}
ApiSetting --> "Place" ExchangePlace
class BotSetting <<record>> {
    + Lot : float <<get>> <<set>>
    + IsTakeableMultiPosition : bool <<get>> <<set>>
    + ReportDir : string <<get>>
}
class "IEnumerable`1"<T> {
}
BotSetting --> "Exchange" ExchangeSetting
BotSetting --> "Strategies<StrategySetting>" "IEnumerable`1"
class ExchangeSetting <<record>> {
}
class DateTimeRange <<record>> {
}
ExchangeSetting --> "Place" ExchangePlace
ExchangeSetting --> "Symbol" Symbol
ExchangeSetting --> "Range" DateTimeRange
ExchangeSetting +-- DateTimeRange
DateTimeRange --> "StartAt" DateTimeOffset
DateTimeRange --> "EndAt" DateTimeOffset
class StrategySetting <<record>> {
}
class "IEnumerable`1"<T> {
}
StrategySetting --> "Kind" StrategyKind
StrategySetting --> "Timeframe" Timeframe
StrategySetting --> "Parameters<int>" "IEnumerable`1"
class MACross {
    + MACross(candleStream:IObservable<Candle>, setting:StrategySetting)
    + <<override>> OnNextAction(datas:IEnumerable<AnalysisData>) : StrategyActionType
}
Strategy <|-- MACross
MACross --> "KInd" StrategyKind
class StrategyUtilty <<static>> {
    + {static} IsGoldenCross(shorts:IEnumerable<decimal>, longs:IEnumerable<decimal>) : bool
    + {static} IsDeadCross(shorts:IEnumerable<decimal>, longs:IEnumerable<decimal>) : bool
}
class Backtest {
    + Backtest(setting:ExchangeSetting, repository:ICandleRepository)
    + Buy(quantity:float) : Task<Position>
    + ClosePosition(position:Position) : Task<decimal>
    + ClosePositionAll() : Task<decimal>
    + Sell(quantity:float) : Task<Position>
}
class "List`1"<T> {
}
class "IConnectableObservable`1"<T> {
}
IExchange <|-- Backtest
Backtest --> "Positions<Position>" "List`1"
Backtest --> "Place" ExchangePlace
Backtest --> "OnPulled<Candle>" "IConnectableObservable`1"
Backtest --> "Symbol" Symbol
class RealExchange {
    + RealExchange(exchange:ccxt.Exchange, setting:ExchangeSetting, logger:ILogger<IExchange>)
    + <<async>> Buy(quantity:float) : Task<Position>
    + <<async>> Sell(quantity:float) : Task<Position>
    + <<async>> ClosePosition(position:Position) : Task<decimal>
    + <<async>> ClosePositionAll() : Task<decimal>
}
class "List`1"<T> {
}
class "IConnectableObservable`1"<T> {
}
IExchange <|-- RealExchange
RealExchange --> "Place" ExchangePlace
RealExchange --> "Positions<Position>" "List`1"
RealExchange --> "Symbol" Symbol
RealExchange --> "OnPulled<Candle>" "IConnectableObservable`1"
class PastCandleRepository {
    + PastCandleRepository(setting:ExchangeSetting, logger:ILogger<PastCandleRepository>)
    + <<async>> Fetch(token:CancellationToken) : Task
    + <<async>> Pull(startAt:DateTimeOffset?, endAt:DateTimeOffset?, token:CancellationToken) : IAsyncEnumerable<Candle>
}
IUpdatableCandleRepository <|-- PastCandleRepository
@enduml
